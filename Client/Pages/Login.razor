@page "/"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorWithApi.Client.Services
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService

<PageTitle>Login</PageTitle>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-center">Login</h4>
                    </div>
                    <div class="card-body">
                        @if (errorMessage != null)
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                                <ValidationMessage For="() => loginModel.Username" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                                <ValidationMessage For="() => loginModel.Password" />
                            </div>
                            
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Login</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isLoading;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            Console.WriteLine($"Attempting login for user: {loginModel.Username}");
            
            // Use relative URL since we're hosting with the server
            var response = await Http.PostAsJsonAsync("api/Login", loginModel);
            
            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Token))
                {
                    // Store the token in local storage
                    await LocalStorageService.SetItemAsync("authToken", tokenResponse.Token);
                    
                    // Update authentication state
                    if (AuthStateProvider is AuthenticationService authService)
                    {
                        await authService.MarkUserAsAuthenticatedAsync(tokenResponse.Token);
                    }
                    
                    // Navigate to fetchdata page after successful login
                    Navigation.NavigateTo("/fetchdata", forceLoad: true);
                    return;
                }
                errorMessage = "Invalid token received from server";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Invalid username or password";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = "Invalid request: " + errorContent;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.StatusCode} - {errorContent}";
            }
            
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Unable to connect to the server. Please check your internet connection. Error: {ex.Message}";
            Console.WriteLine($"HTTP Request Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine($"Unexpected Error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(50, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 50 characters")]
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
        public DateTime Expiration { get; set; }
    }
}
