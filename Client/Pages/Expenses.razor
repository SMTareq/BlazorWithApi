@page "/expenses"
@using BlazorWithApi.Shared.Models
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Expenses> Logger

<PageTitle>Expenses</PageTitle>

<h1>Expense Management</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="() => AddNewExpense()">Add New Expense</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th class="text-end">Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses)
            {
                <tr>
                    <td>@expense.ExpenseDate.ToShortDateString()</td>
                    <td>@expense.Description</td>
                    <td class="text-end">@expense.Amount.ToString("C")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditExpense(expense.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="2" class="text-end">Total:</th>
                <th class="text-end">@expenses.Sum(e => e.Amount).ToString("C")</th>
                <th></th>
            </tr>
        </tfoot>
    </table>
}

@if (showDialog)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentExpense.Id == 0 ? "Add New" : "Edit") Expense</h5>
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Date:</label>
                        <InputDate class="form-control" @bind-Value="currentExpense.ExpenseDate" />
                        <ValidationMessage For="@(() => currentExpense.ExpenseDate)" />
                    </div>
                    <div class="form-group">
                        <label>Description:</label>
                        <InputText class="form-control" @bind-Value="currentExpense.Description" />
                    </div>
                    <div class="form-group">
                        <label>Amount:</label>
                        <InputNumber class="form-control" @bind-Value="currentExpense.Amount" step="0.01" min="0.01" />
                        <ValidationMessage For="@(() => currentExpense.Amount)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveExpense">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Expense> expenses = new();
    private Expense currentExpense = new();
    private bool showDialog = false;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadExpenses();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadExpenses()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            var response = await Http.GetAsync("api/Expenses");
            
            if (response.IsSuccessStatusCode)
            {
                expenses = await response.Content.ReadFromJsonAsync<List<Expense>>();
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                Logger.LogError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading expenses: {ex.Message}";
            Logger.LogError(ex, "Error loading expenses");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddNewExpense()
    {
        currentExpense = new Expense { ExpenseDate = DateTime.Today };
        showDialog = true;
    }

    private async Task EditExpense(int id)
    {
        var response = await Http.GetAsync($"api/Expenses/{id}");
        if (response.IsSuccessStatusCode)
        {
            currentExpense = await response.Content.ReadFromJsonAsync<Expense>();
            showDialog = true;
        }
    }

    private async Task DeleteExpense(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this expense?" });
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/Expenses/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadExpenses();
            }
            else
            {
                errorMessage = $"Error deleting expense: {await response.Content.ReadAsStringAsync()}";
            }
        }
    }

    private async Task SaveExpense()
    {
        try
        {
            HttpResponseMessage response;
            
            if (currentExpense.Id == 0)
            {
                // Add new expense
                response = await Http.PostAsJsonAsync("api/Expenses", currentExpense);
            }
            else
            {
                // Update existing expense
                response = await Http.PutAsJsonAsync($"api/Expenses/{currentExpense.Id}", currentExpense);
            }

            if (response.IsSuccessStatusCode)
            {
                showDialog = false;
                await LoadExpenses();
            }
            else
            {
                errorMessage = $"Error saving expense: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving expense: {ex.Message}";
            Logger.LogError(ex, "Error saving expense");
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
        StateHasChanged();
    }
}
