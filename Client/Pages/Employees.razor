@page "/employees"
@using BlazorWithApi.Shared.Models
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Employees> Logger

<PageTitle>Employees</PageTitle>

<h1>Employee Profile</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (employees == null || !employees.Any())
{
    <p>No employees found.</p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="() => AddNewEmployee()">Add New Employee</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Employee Code</th>
                <th>Name</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.EmployeeCode</td>
                    <td>@employee.EmployeeName</td>
                    <td>@(employee.IsActive == true ? "Active" : "Inactive")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditEmployee(employee.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteEmployee(employee.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showDialog)
{
    <div class="modal" style="display:block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentEmployee.Id == 0 ? "Add New" : "Edit") Employee</h5>
                    <button type="button" class="close" @onclick="CloseDialog">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Employee Code:</label>
                        <input class="form-control" @bind="currentEmployee.EmployeeCode" />
                    </div>
                    <div class="form-group">
                        <label>Employee Name:</label>
                        <input class="form-control" @bind="currentEmployee.EmployeeName" />
                    </div>
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="currentEmployee.IsActive" id="isActive" />
                        <label class="form-check-label" for="isActive">Active</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDialog">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveEmployee">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Employee> employees = new();
    private Employee currentEmployee = new();
    private bool showDialog = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadEmployees();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string errorMessage = string.Empty;
    private async Task LoadEmployees()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            var response = await Http.GetAsync("api/Employees");
            
            if (response.IsSuccessStatusCode)
            {
                employees = await response.Content.ReadFromJsonAsync<List<Employee>>();
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                Logger.LogError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading employees: {ex.Message}";
            Logger.LogError(ex, "Error loading employees");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddNewEmployee()
    {
        currentEmployee = new Employee { IsActive = true };
        showDialog = true;
    }

    private async Task EditEmployee(int id)
    {
        currentEmployee = await Http.GetFromJsonAsync<Employee>($"api/Employees/{id}");
        showDialog = true;
    }

    private async Task DeleteEmployee(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this employee?" });
        if (confirmed)
        {
            await Http.DeleteAsync($"api/Employees/{id}");
            await LoadEmployees();
        }
    }

    private async Task SaveEmployee()
    {
        if (currentEmployee.Id == 0)
        {
            // Add new employee
            await Http.PostAsJsonAsync("api/Employees", currentEmployee);
        }
        else
        {
            // Update existing employee
            await Http.PutAsJsonAsync($"api/Employees/{currentEmployee.Id}", currentEmployee);
        }

        showDialog = false;
        await LoadEmployees();
    }

    private void CloseDialog()
    {
        showDialog = false;
    }
}
